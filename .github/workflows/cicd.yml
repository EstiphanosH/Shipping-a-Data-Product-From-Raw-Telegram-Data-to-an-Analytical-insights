name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
    branches: ["**"]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1 libglib2.0-0 build-essential

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "setuptools>=69.0.3" wheel

      - name: Install project dependencies
        run: |
          pip install flake8 pytest
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          fi

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test_user -d test_db; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Configure dbt environment
        run: |
          mkdir -p ~/.dbt
          cat << EOF > ~/.dbt/profiles.yml
          test_db:
            outputs:
              dev:
                type: postgres
                host: localhost
                port: 5432
                user: test_user
                password: test_pass
                dbname: test_db
                schema: public
            target: dev
          EOF

      - name: Run flake8 linting
        run: |
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: Run tests with pytest
        run: |
          pytest tests/ || true

      - name: Run dbt tests
        working-directory: ./src/dbt_project
        run: |
          if [ -f "dbt_project.yml" ]; then
            dbt deps
            dbt seed --full-refresh
            dbt run --full-refresh
            dbt test
          else
            echo "No dbt project found. Skipping dbt tests."
          fi

      - name: Run API tests
        run: |
          if [ -f "src/api/main.py" ]; then
            python -m src.api.main &
            sleep 5
            pytest src/api/tests/ || true
          else
            echo "No API found. Skipping API tests."
          fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
    strategy:
      matrix:
        image:
          - name: scraper
            dockerfile: docker/Dockerfile.scraper
            context: .
          - name: api
            dockerfile: docker/Dockerfile.api
            context: .
          - name: orchestrator
            dockerfile: docker/Dockerfile.orch
            context: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKER_USERNAME }}/ethiopian-medical-${{ matrix.image.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.image.dockerfile }}
          context: ${{ matrix.image.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
